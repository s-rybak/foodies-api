import multer from "multer";

import HttpError from "../helpers/HttpError.js";
import { avatarMaxFileSizeKB } from "../constants/constants.js";

/**
 * Middleware for handling errors generated by Multer during file uploads.
 *
 * This middleware specifically handles:
 * 1. Multer-specific errors, such as file size limits.
 * 2. Other Multer-related errors, such as unexpected file types.
 *
 * If the error is a Multer error related to file size, it sends a 413 Payload Too Large response.
 * For other Multer errors, it sends a 400 Bad Request response with a general error message.
 *
 * For non-Multer errors, it passes the error to the next error-handling middleware.
 *
 * @param {Object} err The error object that was thrown.
 * @param {Object} req Express request object.
 * @param {Object} res Express response object.
 * @param {Function} next Function to pass control to the next middleware.
 *
 * @returns {void}
 */
const multerErrorHandlingMiddleware = (err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    // Multer-specific errors
    if (err.code === "LIMIT_FILE_SIZE") {
      return next(
        HttpError(
          413,
          `File size too large. Maximum allowed size is ${avatarMaxFileSizeKB} KB.`
        )
      );
    }

    // Handle other Multer errors (e.g., LIMIT_UNEXPECTED_FILE)
    return next(HttpError(400, `File upload error: ${err.message}`));
  }

  // Handle other types of errors
  next(err);
};

export default multerErrorHandlingMiddleware;
